<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_event</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_hud</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The game is over, wanna continue or you will chicken out?

//Inherit event
event_inherited();

//Play 'Game Over' theme
audio_play_sound(bgm_gameover, 0, false);

//Set the choice as the first.
choice = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles keyboard presses.

//Inherit event
event_inherited();

//Check if the 'Up Key' is pressed.
if (keyboard_check_pressed(vk_up)) {

    //If the choice is already the first, exit
    if (choice == 0)
    exit;
    
    //Otherwise, move up a choice
    choice -= 1;
    
    //Play 'Fireball' sound
    audio_play_sound(snd_fireball, 0, false);
}

//Check if the 'Down Key' is pressed.
else if (keyboard_check_pressed(vk_down)) {

    //If the choice is already the last, exit
    if (choice == 2)
    exit;
    
    //Otherwise, move down a choice
    choice += 1;
    
    //Play 'Fireball' sound
    audio_play_sound(snd_fireball, 0, false);
}

//Check if the 'Shift Key' is pressed.
else if (keyboard_check_pressed(vk_shift)) {
    
    //Switch between the choices
    switch (choice) {
        
        //If you chose the first choice.
        case (0): {
        
            //Play 'Correct' sound
            audio_play_sound(snd_correct, 0, false);
            
            //Reset globals
            score = 0;
            lives = 5;
            global.time = 0;
            global.coins = 0;
            global.powerup = cs_small;
            
            //Go to level start screen
            room_goto(rm_levelstart);
        } break;
        
        //If you chose the second choice.
        case (1): {
        
            //Play 'Correct' sound
            audio_play_sound(snd_correct, 0, false);
            
            //Reset globals
            score = 0;
            lives = 5;
            global.time = 0;
            global.coins = 0;
            global.powerup = cs_small;
            
            //Save the game
            save('SMBESave.sav');
            
            //Go to level start screen
            room_goto(rm_levelstart);
            
        } break;
        
        //If you chose the last choice.
        case (2): {
        
            //Play 'Correct' sound
            audio_play_sound(snd_correct, 0, false);
                          
            //Reset globals
            score = 0;
            lives = 5;
            global.time = 0;
            global.coins = 0;
            global.powerup = cs_small;
            
            //Save the game
            save('SMBESave.sav');
            
            //Exit to title screen
            room_goto(rm_title);
            
            //Exit
            exit;
        } break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop 'Game Over' theme

audio_stop_sound(bgm_gameover);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw 'Game Over' screen

//Inherit event
event_inherited();

//Draw screen
draw_sprite_ext(spr_hud_gameover, global.player, 0, 0, 1, 1, 0, c_white, 1);

//Draw choice
draw_sprite_ext(spr_hud_gameover_cursor, 0, view_xview[0]+68, view_yview[0]+102+(choice*16), 1, 1, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
