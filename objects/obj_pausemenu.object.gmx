<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_event</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The pause menu

//Play 'Pause' sound
audio_play_sound(snd_pause, false, 0);

//Make sure the box doesn't animate
image_speed = 0;
image_index = 0;
image_xscale = 0;
image_yscale = 0;

//Take a screenshot.
back = background_create_from_surface(application_surface,0,0,room_width,room_height,0,0);

//Deactivate the instances.
alarm[1] = 2;

//Set the choice as the first.
choice = 0;

//Handle certain actions.
ready = 0;
ready2 = 1;

//Begin scaling
alarm[0] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deactivate stuff.

//Deactivate everything except this object
instance_deactivate_all(1);

//Activate persistent object
instance_activate_object(obj_persistent);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle the scaling.

if (ready2 == 1) {

    if (image_xscale &lt; 1) {
    
        //Scale menu up
        image_xscale += 0.05;
        image_yscale += 0.05;
        
        //Repeats the process
        alarm[0] = 1;
    }
    
    else {
    
        image_xscale = 1;
        image_yscale = 1;
        ready = 1;
    }
}

else if (ready2 == 2) {

    if (image_xscale &gt; 0) {
    
        //Scale menu down
        image_xscale -= 0.05;
        image_yscale -= 0.05;
        
        //Repeats the process
        alarm[0] = 1;
    }
    
    else {
            
        //Activate everything
        instance_activate_all();
        
        //Delete the screenshot if it exists.
        if (background_exists(back)) {
        
            background_delete(back);
        }
        
        //Reset the state of the shift key
        keyboard_clear(vk_shift);
        
        //Destroy the message box
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles keyboard presses.

//Check if the 'Up Key' is pressed.
if (keyboard_check_pressed(vk_up)) {

    //If the choice is already the first, exit
    if (choice == 0)
    exit;
    
    //Otherwise, move up a choice
    choice -= 1;
    
    //Play 'Fireball' sound
    audio_play_sound(snd_fireball, 0, false);
}

//Check if the 'Down Key' is pressed.
else if (keyboard_check_pressed(vk_down)) {

    //If the choice is already the last, exit
    if (choice == 2)
    exit;
    
    //Otherwise, move down a choice
    choice += 1;
    
    //Play 'Fireball' sound
    audio_play_sound(snd_fireball, 0, false);
}

//Check if the 'Shift Key' is pressed.
else if (keyboard_check_pressed(vk_shift)) {

    //Has the action been completed?
    if (ready == 1) {
    
        //Switch between the choices
        switch (choice) {
            
            //If you chose the first choice.
            case (0): {
            
                //Play 'Correct' sound
                audio_play_sound(snd_correct, 0, false);
                            
                //Play 'Pause' sound
                audio_play_sound(snd_pause, false, 0);
            
                //Continue the game
                if (ready == 1) {
                
                    ready2 = 2;
                    alarm[0] = 1;
                }
            } break;
            
            //If you chose the second choice.
            case (1): {
            
                //Play 'Correct' sound
                audio_play_sound(snd_correct, 0, false);
                
                //Play 'Pause' sound
                audio_play_sound(snd_pause, false, 0);
                            
                //Save the game
                save('SMBESave.sav');
                
                //Continue the game
                if (ready == 1) {
                
                    ready2 = 2;
                    alarm[0] = 1;
                }                
                
            } break;
            
            //If you chose the last choice.
            case (2): {

                //Save the game
                save('SMBESave.sav');
                
                //Initialize globals
                init_globals();
                
                //Stop all sounds
                audio_stop_all();
                
                //Exit to title screen
                room_goto(rm_title);
                
                //Exit
                exit;
            } break;
        }
    }
}

//Check if the 'Enter Key' is pressed without alt.
else if (keyboard_check_pressed(vk_enter)) &amp;&amp; (!keyboard_check(vk_alt)) {

    //Play 'Pause' sound
    audio_play_sound(snd_pause, false, 0);

    //Makes the menu ready to be closed.
    if (ready == 1) {
    
        ready2 = 2;
    }
    
    //Shrinks...
    alarm[0] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the menu.

//Draw the screenshot
if (background_exists(back)) {

    //Disable alpha blending.
    draw_enable_alphablend(0);
    
    //Draw the screenshot
    draw_background(back,view_xview[0],view_yview[0]);
    
    //Enable alpha blending.
    draw_enable_alphablend(1);
}

//Draw the actual border.
draw_sprite_ext(spr_hud_pause, 0, view_xview[0]+global.gw/2, view_yview[0]+global.gh/2, image_xscale, image_yscale, 0, c_white, 1);

//Draw if the menu if fully scaled
if (image_xscale == 1) {

    //Draw choices
    draw_sprite_ext(spr_hud_pause, 1, view_xview[0]+global.gw/2, view_yview[0]+global.gh/2, image_xscale, image_yscale, 0, c_white, 1);
    
    //Draw cursor
    draw_sprite_ext(spr_hud_pause_cursor, 0, view_xview[0]+77, view_yview[0]+92+(choice*16), 1, 1, 0, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
